sqoop import-all-tables \
    --connect "jdbc:mysql://quickstart:3306/retail_db" \
    --username retail_dba \
    --password cloudera \
    --hive-import \
    --warehouse-dir /user/hive/warehouse/problem6.db \
    --create-hive-table \
    --hive-database problem6 \
    --as-textfile \
    -m 1

department_df = sqlContext.sql("select * from departments")
department_df.show()

categories_df =sqlContext.sql("select * from categories")
categories_df.show()

from pyspark.sql.functions import *

select * from products p
join (select d.department_name, 
c.category_id, c.category_name
from departments d 
join categories c 
on d.department_id = c.category_department_id) dc 
on p.product_category_id = dc.category_id 
limit 10;

sqlContext.sql("use problem6")

result_df = sqlContext. \
sql("select d.department_id, p.product_id, p.product_name,p.product_price, \
rank() over (partition by d.department_id order by p.product_price) as product_price_rank, \
dense_rank() over (partition by d.department_id order by p.product_price) as product_dense_price_rank \
from products p inner join categories c on p.product_category_id = c.category_id \
inner join departments d on c.category_department_id = d.department_id \
order by d.department_id, product_price_rank desc, product_dense_price_rank")     
   
result_df.show() 

sqlContext. \
sql("select * from customers").show()
sqlContext.sql("describe customers").show()

result_df2 = sqlContext. \
sql("select c.customer_id, c.customer_fname, \
count(distinct(oi.order_item_product_id)) as unique_products \
from customers c inner join orders o on c.customer_id = o.order_customer_id \
inner join order_items oi on o.order_id = oi.order_item_order_id \
group by c.customer_id, c.customer_fname \
order by unique_products desc, c.customer_id limit 10")

result_df2.show()

result_df.where("product_price < 100").show()


result_df2.registerTempTable("top_cust")
sqlContext.sql("select * from top_cust").show()

sqlContext. \
sql("select p.* from products p inner join order_items oi \
on p.product_id = oi.order_item_product_id inner join orders o \
on oi.order_item_order_id = o.order_id inner join top_cust tc \
on o.order_customer_id = tc.customer_id \
where p.product_price < 100").show()

result_df.registerTempTable("product_rank")
sqlContext. \
sql("create table problem6.product_rank_result \
as select * from product_rank where product_price < 100")
sqlContext.sql("select * from product_rank_result")


sqlContext. \
sql("create table problem6.top_products as \
select p.* from products p inner join order_items oi \
on p.product_id = oi.order_item_product_id inner join orders o \
on oi.order_item_order_id = o.order_id inner join top_cust tc \
on o.order_customer_id = tc.customer_id \
where p.product_price < 100")

sqlContext.sql("select * from top_products").show()